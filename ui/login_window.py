from PyQt5.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QPushButton,
    QLabel,
    QFrame,
    QFileDialog,
    QMessageBox,
    QListWidget,
    QTextEdit,
    QCheckBox,
    QLineEdit,
    QGroupBox,
    QSplitter,
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtWidgets import QScrollArea, QListWidget, QListWidgetItem
from PyQt5.QtGui import QFont
import threading
import time
import random
import requests
import os
import uuid
import shutil
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from database.user_manager import user_manager
from config.settings import settings

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMP_PROFILES_DIR = os.path.join(BASE_DIR, "temp_profiles")

class LoginWindow(QWidget):
    def __init__(self, colors, return_callback):
        super().__init__()
        self.colors = colors
        self.return_callback = return_callback
        self.users = []
        self.current_ip = "Kontrol ediliyor..."
        self.ip_thread_running = True

        # IP monitoring timer
        self.ip_timer = QTimer()
        self.ip_timer.timeout.connect(self.update_ip)

        self.init_ui()
        self.setup_style()

        # Cihaz listesini JSON dosyasƒ±ndan y√ºkle (UI elemanlarƒ± hazƒ±r olduktan sonra)
        self.android_devices = self.load_devices_from_file()

        self.start_ip_monitoring()

    def load_devices_from_file(self):
        """JSON dosyasƒ±ndan cihaz listesini y√ºkle"""
        devices_file = os.path.join(BASE_DIR, "config", "android_devices.json")

        # Varsayƒ±lan cihaz listesi (dosya yoksa)
        default_devices = [
            {
                "name": "Apple iPhone 15 Pro Max",
                "user_agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
                "device_metrics": {
                    "width": 430,
                    "height": 932,
                    "device_scale_factor": 3,
                    "mobile": True
                },
                "client_hints": {
                    "platform": "iOS",
                    "mobile": True
                }
            },
            {
                "name": "Samsung Galaxy S24 Ultra",
                "user_agent": "Mozilla/5.0 (Linux; Android 14; SM-S928U Build/QL1A.230918.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36",
                "device_metrics": {
                    "width": 384,
                    "height": 824,
                    "device_scale_factor": 3.75,
                    "mobile": True
                },
                "client_hints": {
                    "platform": "Android",
                    "mobile": True
                }
            },
            {
                "name": "Xiaomi 15 Ultra",
                "user_agent": "Mozilla/5.0 (Linux; Android 14; Mi 13 Pro Build/TKQ1.220716.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36",
                "device_metrics": {
                    "width": 393,
                    "height": 852,
                    "device_scale_factor": 3,
                    "mobile": True
                },
                "client_hints": {
                    "platform": "Android",
                    "mobile": True
                }
            }
        ]

        try:
            if os.path.exists(devices_file):
                with open(devices_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    devices = data.get('devices', default_devices)
                    self.log_message(f"‚úÖ {len(devices)} cihaz JSON dosyasƒ±ndan y√ºklendi")
                    return devices
            else:
                # Dosya yoksa olu≈ütur
                os.makedirs(os.path.dirname(devices_file), exist_ok=True)
                with open(devices_file, 'w', encoding='utf-8') as f:
                    json.dump({"devices": default_devices}, f, indent=2, ensure_ascii=False)
                self.log_message(f"‚ÑπÔ∏è Cihaz dosyasƒ± olu≈üturuldu: {devices_file}")
                return default_devices

        except Exception as e:
            self.log_message(f"‚ö†Ô∏è Cihaz dosyasƒ± okuma hatasƒ±: {e}, varsayƒ±lan liste kullanƒ±lƒ±yor")
            return default_devices

    def init_ui(self):
        """UI'yi ba≈ülat"""
        layout = QVBoxLayout()

        # Header
        header_layout = QHBoxLayout()

        # Geri butonu
        back_btn = QPushButton("‚Üê Ana Men√ºye D√∂n")
        back_btn.setObjectName("backButton")
        back_btn.clicked.connect(self.return_to_main)
        back_btn.setCursor(Qt.PointingHandCursor)

        # Ba≈ülƒ±k
        title_label = QLabel("üì• Giri≈ü Yapƒ±cƒ±")
        title_label.setObjectName("pageTitle")

        header_layout.addWidget(back_btn)
        header_layout.addStretch()
        header_layout.addWidget(title_label)
        header_layout.addStretch()

        # Ana i√ßerik - Splitter ile b√∂l
        splitter = QSplitter(Qt.Horizontal)

        # Sol panel - Ayarlar
        left_panel = self.create_settings_panel()
        splitter.addWidget(left_panel)

        # Saƒü panel - Kullanƒ±cƒ± listesi ve loglar
        right_panel = self.create_user_panel()
        splitter.addWidget(right_panel)

        # Splitter oranlarƒ±
        splitter.setSizes([300, 600])

        # Alt panel - IP bilgisi
        bottom_panel = self.create_bottom_panel()

        # Ana layout'a ekle
        layout.addLayout(header_layout)
        layout.addWidget(splitter, 1)
        layout.addWidget(bottom_panel)

        self.setLayout(layout)

    def create_settings_panel(self):
        """Ayarlar panelini olu≈ütur"""
        panel = QFrame()
        panel.setObjectName("settingsPanel")
        layout = QVBoxLayout()

        # Ba≈ülƒ±k
        title = QLabel("‚öôÔ∏è Ayarlar")
        title.setObjectName("sectionTitle")
        layout.addWidget(title)

        # Dosya formatƒ± ayarlarƒ±
        format_group = QGroupBox("üìù Dosya Formatƒ±")
        format_group.setObjectName("settingsGroup")
        format_layout = QVBoxLayout()
        format_layout.setSpacing(8)

        format_info_label = QLabel("Temel format: kullaniciadi:sifre\nEk alanlarƒ± se√ßin ve sƒ±ralarƒ±nƒ± belirleyin:")
        format_info_label.setObjectName("settingsLabel")
        format_layout.addWidget(format_info_label)

        # Format alanlarƒ± i√ßin checkbox listesi
        order_label = QLabel("Alan Sƒ±ralamasƒ± (tƒ±klama sƒ±rasƒ±na g√∂re):")
        order_label.setObjectName("settingsLabel")
        format_layout.addWidget(order_label)

        # Checkboxlar i√ßin container widget
        checkbox_container = QFrame()
        checkbox_container.setObjectName("checkboxContainer")
        checkbox_layout = QVBoxLayout()
        checkbox_layout.setSpacing(4)

        # Varsayƒ±lan format sƒ±rasƒ±
        self.format_fields = [
            {"key": "auth_token", "name": "auth_token (Twitter √ßerezi)", "enabled": False, "order": 0},
            {"key": "ct0", "name": "ct0 (Twitter √ßerezi)", "enabled": False, "order": 0},
            {"key": "proxy_ip", "name": "Proxy IP", "enabled": False, "order": 0},
            {"key": "proxy_port", "name": "Proxy Port", "enabled": False, "order": 0},
            {"key": "phone", "name": "Telefon Numarasƒ±", "enabled": False, "order": 0},
            {"key": "email", "name": "E-mail Adresi", "enabled": False, "order": 0}
        ]

        self.format_checkboxes = {}
        self.format_order_counter = 0

        # Checkbox'larƒ± olu≈ütur
        for field in self.format_fields:
            checkbox = QCheckBox(field["name"])
            checkbox.setObjectName("formatCheckbox")
            checkbox.stateChanged.connect(lambda state, key=field["key"]: self.on_format_checkbox_changed(key, state))
            self.format_checkboxes[field["key"]] = checkbox
            checkbox_layout.addWidget(checkbox)

        checkbox_container.setLayout(checkbox_layout)

        # Scrollable area ekle
        scroll_area = QScrollArea()
        scroll_area.setWidget(checkbox_container)
        scroll_area.setMaximumHeight(130)
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        format_layout.addWidget(scroll_area)

        # Format √∂nizleme
        self.format_preview = QLabel("√ñnizleme: kullaniciadi:sifre")
        self.format_preview.setObjectName("formatPreview")
        format_layout.addWidget(self.format_preview)

        format_group.setLayout(format_layout)

        # Proxy ayarlarƒ±
        proxy_group = QGroupBox("üåê Proxy Ayarlarƒ±")
        proxy_group.setObjectName("settingsGroup")
        proxy_layout = QVBoxLayout()

        self.proxy_enabled = QCheckBox("Proxy Kullanƒ±lsƒ±n mƒ±?")
        self.proxy_enabled.setObjectName("settingsCheckbox")
        self.proxy_enabled.toggled.connect(self.toggle_proxy_fields)

        self.proxy_entry = QLineEdit()
        self.proxy_entry.setPlaceholderText("IP:Port (√∂rn: 127.0.0.1:8080)")
        self.proxy_entry.setObjectName("settingsInput")
        self.proxy_entry.setEnabled(False)

        proxy_url_label = QLabel("IP Reset URL:")
        proxy_url_label.setObjectName("settingsLabel")

        self.reset_url_entry = QLineEdit()
        self.reset_url_entry.setPlaceholderText("http://example.com/reset")
        self.reset_url_entry.setObjectName("settingsInput")
        self.reset_url_entry.setEnabled(False)

        proxy_layout.addWidget(self.proxy_enabled)
        proxy_layout.addWidget(QLabel("Proxy IP:Port:"))
        proxy_layout.addWidget(self.proxy_entry)
        proxy_layout.addWidget(proxy_url_label)
        proxy_layout.addWidget(self.reset_url_entry)
        proxy_group.setLayout(proxy_layout)

        # Tarayƒ±cƒ± ayarlarƒ±
        browser_group = QGroupBox("üëÄ Tarayƒ±cƒ± Ayarlarƒ±")
        browser_group.setObjectName("settingsGroup")
        browser_layout = QVBoxLayout()

        self.browser_visible = QCheckBox("Tarayƒ±cƒ± G√∂r√ºns√ºn m√º?")
        self.browser_visible.setObjectName("settingsCheckbox")
        self.browser_visible.setChecked(True)

        browser_layout.addWidget(self.browser_visible)
        browser_group.setLayout(browser_layout)

        # Ba≈ülat butonu
        start_btn = QPushButton("üöÄ Giri≈ü ƒ∞≈ülemini Ba≈ülat")
        start_btn.setObjectName("primaryButton")
        start_btn.clicked.connect(self.start_login_process)
        start_btn.setCursor(Qt.PointingHandCursor)

        layout.addWidget(format_group)
        layout.addWidget(proxy_group)
        layout.addWidget(browser_group)
        layout.addStretch()
        layout.addWidget(start_btn)

        # Panel geni≈üliƒüini artƒ±r
        panel.setMinimumWidth(320)

        panel.setLayout(layout)
        return panel

    def create_user_panel(self):
        """Kullanƒ±cƒ± panelini olu≈ütur"""
        panel = QFrame()
        panel.setObjectName("userPanel")
        layout = QVBoxLayout()

        # Kullanƒ±cƒ± listesi
        user_group = QGroupBox("üì• Kullanƒ±cƒ± Listesi")
        user_group.setObjectName("userGroup")
        user_layout = QVBoxLayout()

        # Liste y√ºkle butonu
        load_btn = QPushButton("üìÅ Liste Y√ºkle")
        load_btn.setObjectName("secondaryButton")
        load_btn.clicked.connect(self.load_user_list)
        load_btn.setCursor(Qt.PointingHandCursor)

        # Kullanƒ±cƒ± listesi
        self.user_list = QListWidget()
        self.user_list.setObjectName("userList")

        user_layout.addWidget(load_btn)
        user_layout.addWidget(self.user_list)
        user_group.setLayout(user_layout)

        # Log alanƒ±
        log_group = QGroupBox("üìù ƒ∞≈ülem Loglarƒ±")
        log_group.setObjectName("logGroup")
        log_layout = QVBoxLayout()

        self.log_text = QTextEdit()
        self.log_text.setObjectName("logText")
        self.log_text.setReadOnly(True)

        log_layout.addWidget(self.log_text)
        log_group.setLayout(log_layout)

        # Splitter ile b√∂l
        content_splitter = QSplitter(Qt.Vertical)
        content_splitter.addWidget(user_group)
        content_splitter.addWidget(log_group)
        content_splitter.setSizes([300, 200])

        layout.addWidget(content_splitter)
        panel.setLayout(layout)
        return panel

    def create_bottom_panel(self):
        """Alt paneli olu≈ütur"""
        panel = QFrame()
        panel.setObjectName("bottomPanel")
        layout = QHBoxLayout()

        # Bilgisayar IP'si
        computer_ip_label = QLabel("üíª Bilgisayar IP:")
        computer_ip_label.setObjectName("ipLabel")

        self.computer_ip_display = QLabel(self.current_ip)
        self.computer_ip_display.setObjectName("computerIpDisplay")

        # Tarayƒ±cƒ± IP'si
        browser_ip_label = QLabel("üåê Tarayƒ±cƒ± IP:")
        browser_ip_label.setObjectName("ipLabel")

        self.browser_ip_display = QLabel("Hen√ºz kontrol edilmedi")
        self.browser_ip_display.setObjectName("browserIpDisplay")

        layout.addWidget(computer_ip_label)
        layout.addWidget(self.computer_ip_display)
        layout.addWidget(QLabel("  |  "))
        layout.addWidget(browser_ip_label)
        layout.addWidget(self.browser_ip_display)
        layout.addStretch()

        panel.setLayout(layout)
        return panel

    def setup_style(self):
        """Stil ayarlarƒ±nƒ± uygula"""
        style = f"""
        #settingsPanel {{
            background-color: {self.colors['card_bg']};
            border: 1px solid {self.colors['border']};
            border-radius: 12px;
            margin: 5px;
            padding: 15px;
        }}

        #userPanel {{
            background-color: {self.colors['background']};
            margin: 5px;
        }}

        #bottomPanel {{
            background-color: {self.colors['background']};
            padding: 10px;
            border-top: 1px solid {self.colors['border']};
        }}

        #pageTitle {{
            font-size: 24px;
            font-weight: 700;
            color: {self.colors['text_primary']};
            font-family: 'SF Pro Display', 'Segoe UI', Arial, sans-serif;
        }}

        #sectionTitle {{
            font-size: 18px;
            font-weight: 600;
            color: {self.colors['text_primary']};
            font-family: 'SF Pro Display', 'Segoe UI', Arial, sans-serif;
            margin-bottom: 15px;
        }}

        #backButton {{
            background-color: {self.colors['text_secondary']};
            color: white;
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-size: 14px;
            font-weight: 600;
            font-family: 'SF Pro Display', 'Segoe UI', Arial, sans-serif;
        }}

        #backButton:hover {{
            background-color: #555555;
        }}

        #primaryButton {{
            background-color: {self.colors['primary']};
            color: white;
            border: none;
            border-radius: 10px;
            padding: 15px 20px;
            font-size: 16px;
            font-weight: 600;
            font-family: 'SF Pro Display', 'Segoe UI', Arial, sans-serif;
        }}

        #primaryButton:hover {{
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 {self.colors['primary_hover']}, 
                stop:1 #D14A1F);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
        }}

        #secondaryButton {{
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 {self.colors['secondary']}, 
                stop:1 #357ABD);
            color: white;
            border: none;
            border-radius: 10px;
            padding: 12px 20px;
            font-size: 14px;
            font-weight: 600;
            font-family: 'SF Pro Display', 'Segoe UI', Arial, sans-serif;
        }}

        #secondaryButton:hover {{
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 {self.colors['secondary_hover']}, 
                stop:1 #2E689F);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(74, 144, 226, 0.3);
        }}

        QGroupBox {{
            font-size: 14px;
            font-weight: 600;
            color: {self.colors['text_primary']};
            border: 1px solid {self.colors['border']};
            border-radius: 8px;
            margin-top: 10px;
            padding-top: 10px;
        }}

        QGroupBox::title {{
            subcontrol-origin: margin;
            left: 10px;
            padding: 0 8px 0 8px;
            background-color: {self.colors['card_bg']};
        }}

        #settingsCheckbox::indicator {{
            width: 20px;
            height: 20px;
            border-radius: 10px;
            border: 3px solid {self.colors['border']};
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #FFFFFF, 
                stop:1 #F7FAFC);
        }}

        #settingsCheckbox::indicator:checked {{
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 {self.colors['primary']}, 
                stop:1 {self.colors['primary_end']});
            border-color: {self.colors['primary']};
            box-shadow: 0 0 10px rgba(255, 107, 53, 0.3);
        }}

        #settingsCheckbox::indicator:hover {{
            border-color: {self.colors['primary_hover']};
            box-shadow: 0 0 5px rgba(255, 107, 53, 0.2);
        }}

        #settingsInput {{
            border: 2px solid {self.colors['border']};
            border-radius: 10px;
            padding: 12px 16px;
            font-size: 14px;
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 #FFFFFF, 
                stop:1 #F7FAFC);
            color: {self.colors['text_primary']};
            font-weight: 500;
        }}

        #settingsInput:focus {{
            border-color: {self.colors['primary']};
            outline: none;
            background: #FFFFFF;
            box-shadow: 0 0 15px rgba(255, 107, 53, 0.2);
        }}

        #settingsInput:hover {{
            border-color: {self.colors['border_hover']};
        }}

        #settingsInput:disabled {{
            background-color: {self.colors['background_alt']};
            color: {self.colors['text_secondary']};
        }}

        #settingsLabel {{
            font-size: 13px;
            color: {self.colors['text_secondary']};
            margin-top: 10px;
        }}

        #userList {{
            border: 1px solid {self.colors['border']};
            border-radius: 8px;
            background-color: white;
            alternate-background-color: {self.colors['card_bg']};
            selection-background-color: {self.colors['primary']};
            font-size: 13px;
            padding: 5px;
        }}

        #logText {{
            border: 1px solid {self.colors['border']};
            border-radius: 8px;
            background-color: {self.colors['card_bg']};
            font-family: 'SF Mono', 'Consolas', monospace;
            font-size: 12px;
            color: {self.colors['text_primary']};
            padding: 10px;
        }}

        #ipLabel {{
            font-size: 14px;
            font-weight: 600;
            color: {self.colors['text_primary']};
        }}

        #computerIpDisplay {{
            font-size: 14px;
            color: {self.colors['secondary']};
            font-weight: 500;
            margin-left: 10px;
        }}

        #browserIpDisplay {{
            font-size: 14px;
            color: {self.colors['primary']};
            font-weight: 500;
            margin-left: 10px;
        }}

        #formatPreview {{
            font-size: 12px;
            color: {self.colors['secondary']};
            font-family: 'SF Mono', 'Consolas', monospace;
            background-color: {self.colors['background_alt']};
            padding: 8px;
            border-radius: 6px;
            margin-top: 10px;
        }}

        #formatOrderList {{
            border: 1px solid {self.colors['border']};
            border-radius: 8px;
            background-color: white;
            alternate-background-color: {self.colors['card_bg']};
            selection-background-color: {self.colors['primary']};
            font-size: 12px;
            padding: 4px;
        }}

        #formatOrderList::item {{
            padding: 4px 8px;
            border-radius: 4px;
            margin: 1px;
        }}

        #formatOrderList::item:selected {{
            background-color: {self.colors['primary']};
            color: white;
        }}

        #formatOrderList::item:hover {{
            background-color: {self.colors['card_bg']};
        }}

        #checkboxContainer {{
            background-color: {self.colors['card_bg']};
            border: 1px solid {self.colors['border']};
            border-radius: 6px;
            padding: 8px;
        }}

        #formatCheckbox {{
            font-size: 12px;
            color: {self.colors['text_primary']};
            padding: 4px;
            border-radius: 4px;
        }}

        #formatCheckbox:hover {{
            background-color: {self.colors['background_alt']};
        }}

        #formatCheckbox::indicator {{
            width: 16px;
            height: 16px;
            border-radius: 8px;
            border: 2px solid {self.colors['border']};
            background: white;
        }}

        #formatCheckbox::indicator:checked {{
            background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                stop:0 {self.colors['primary']}, 
                stop:1 {self.colors['primary_end']});
            border-color: {self.colors['primary']};
        }}

        #formatCheckbox::indicator:hover {{
            border-color: {self.colors['primary_hover']};
        }}
        """

        self.setStyleSheet(style)

    def toggle_proxy_fields(self):
        """Proxy alanlarƒ±nƒ± etkinle≈ütir/devre dƒ±≈üƒ± bƒ±rak"""
        enabled = self.proxy_enabled.isChecked()
        self.proxy_entry.setEnabled(enabled)
        self.reset_url_entry.setEnabled(enabled)

    def on_format_checkbox_changed(self, field_key, state):
        """Format checkbox deƒüi≈ütiƒüinde √ßaƒürƒ±lƒ±r"""
        field = next((f for f in self.format_fields if f["key"] == field_key), None)
        if not field:
            return

        if state == Qt.Checked:
            # Aktif edildi - sƒ±ra numarasƒ± ver
            self.format_order_counter += 1
            field["order"] = self.format_order_counter
            field["enabled"] = True

            # Checkbox text'ine sƒ±ra numarasƒ±nƒ± ekle
            checkbox = self.format_checkboxes[field_key]
            checkbox.setText(f"{field['order']}. {field['name']}")
        else:
            # Pasif edildi - sƒ±ra numarasƒ±nƒ± kaldƒ±r
            field["order"] = 0
            field["enabled"] = False

            # Checkbox text'ini normale d√∂nd√ºr
            checkbox = self.format_checkboxes[field_key]
            checkbox.setText(field["name"])

            # Diƒüer elementlerin sƒ±ra numaralarƒ±nƒ± g√ºncelle
            self.reorder_format_fields()

        self.update_format_preview()

    def reorder_format_fields(self):
        """Aktif alanlarƒ±n sƒ±ra numaralarƒ±nƒ± yeniden d√ºzenle"""
        # Aktif alanlarƒ± sƒ±raya g√∂re sƒ±rala
        active_fields = [f for f in self.format_fields if f["enabled"]]
        active_fields.sort(key=lambda x: x["order"])

        # Sƒ±ra numaralarƒ±nƒ± yeniden ata
        for i, field in enumerate(active_fields, 1):
            field["order"] = i
            checkbox = self.format_checkboxes[field["key"]]
            checkbox.setText(f"{i}. {field['name']}")

        # Counter'ƒ± g√ºncelle
        self.format_order_counter = len(active_fields)

    def update_format_preview(self):
        """Format √∂nizlemesini g√ºncelle"""
        format_parts = ["kullaniciadi", "sifre"]

        # Aktif alanlarƒ± sƒ±raya g√∂re ekle
        active_fields = [f for f in self.format_fields if f["enabled"]]
        active_fields.sort(key=lambda x: x["order"])

        for field in active_fields:
            format_parts.append(field["key"])

        preview_text = f"√ñnizleme: {':'.join(format_parts)}"
        self.format_preview.setText(preview_text)

    def load_user_list(self):
        """Kullanƒ±cƒ± listesini y√ºkle"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Kullanƒ±cƒ± Listesi Se√ß",
            "",
            "Text files (*.txt);;All files (*.*)"
        )

        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    lines = file.readlines()

                self.users = []
                self.user_list.clear()

                # Format sƒ±rasƒ±nƒ± checkbox'lardan al
                format_order = ['username', 'password']

                # Aktif alanlarƒ± sƒ±raya g√∂re ekle
                active_fields = [f for f in self.format_fields if f["enabled"]]
                active_fields.sort(key=lambda x: x["order"])

                for field in active_fields:
                    format_order.append(field["key"])

                for line in lines:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        try:
                            parts = line.split(':')
                            if len(parts) >= 2:
                                user_data = {}

                                # Format sƒ±rasƒ±na g√∂re deƒüerleri ata
                                for i, field in enumerate(format_order):
                                    if i < len(parts):
                                        value = parts[i].strip() if parts[i].strip() else None
                                        user_data[field] = value

                                # Zorunlu alanlarƒ± kontrol et
                                if not user_data.get('username') or not user_data.get('password'):
                                    continue

                                # Display text'i olu≈ütur
                                display_parts = [user_data['username']]

                                if user_data.get('auth_token') or user_data.get('ct0'):
                                    display_parts.append("(√áerezli Giri≈ü)")
                                elif user_data.get('proxy_ip') and user_data.get('proxy_port'):
                                    display_parts.append(f"(Proxy: {user_data['proxy_ip']}:{user_data['proxy_port']})")
                                else:
                                    display_parts.append("(Normal Giri≈ü)")

                                display_text = " ".join(display_parts)

                                self.users.append(user_data)
                                self.user_list.addItem(display_text)

                        except Exception as e:
                            self.log_message(f"‚ö†Ô∏è Satƒ±r i≈üleme hatasƒ±: {line} - {e}")

                self.log_message(f"‚úÖ {len(self.users)} kullanƒ±cƒ± y√ºklendi.")
                self.log_message(f"üìù Kullanƒ±lan format: {':'.join(format_order)}")

            except Exception as e:
                self.show_error(f"Dosya okuma hatasƒ±: {str(e)}")

    def start_login_process(self):
        """Giri≈ü i≈ülemini ba≈ülat"""
        if not self.users:
            self.show_warning("√ñnce kullanƒ±cƒ± listesi y√ºkleyin!")
            return

        # Thread'de √ßalƒ±≈ütƒ±r
        thread = threading.Thread(target=self.login_process_thread, daemon=True)
        thread.start()

    def login_process_thread(self):
        """Giri≈ü i≈ülemi thread'i"""
        self.log_message("üöÄ Giri≈ü i≈ülemi ba≈ülatƒ±lƒ±yor...")

        for i, user in enumerate(self.users, 1):
            try:
                self.log_message(f"\n[{i}/{len(self.users)}] {user['username']} i≈üleniyor...")

                # Profil kontrol√º
                base_profile_path = f"./Profiller/{user['username']}"
                if os.path.exists(base_profile_path):
                    try:
                        files = os.listdir(base_profile_path)
                        important_files = [f for f in files if f in ['Default', 'Local State', 'Preferences']]
                        if len(important_files) >= 2:
                            self.log_message(f"‚è≠Ô∏è {user['username']} zaten giri≈ü yapmƒ±≈ü, atlanƒ±yor.")
                            continue
                    except:
                        pass

                # Tarayƒ±cƒ± ba≈ülat
                driver = self.create_driver(user)
                if not driver:
                    continue

                # IP kontrol√º yap
                browser_ip = self.check_browser_ip(driver)
                if not browser_ip:
                    self.log_message(f"‚ùå {user['username']} i√ßin tarayƒ±cƒ± IP'si alƒ±namadƒ±.")
                    driver.quit()
                    continue

                # Proxy kontrol√º yap
                if not self.validate_proxy(browser_ip):
                    self.log_message(f"‚ùå {user['username']} i√ßin IP deƒüi≈ümemi≈ü, i≈ülem durduruldu.")
                    driver.quit()
                    continue

                # Giri≈ü i≈ülemi
                success = self.perform_login(driver, user)

                if success:
                    self.log_message(f"‚úÖ {user['username']} ba≈üarƒ±yla giri≈ü yaptƒ±.")

                    # Ana sayfada 5 saniye gezinme
                    self.log_message(f"üì± {user['username']} ana sayfada 5 saniye geziniyor...")
                    self.simulate_scroll_duration(driver, 5)

                    # RTErdogan profiline git ve 10 saniye gezin
                    self.log_message(f"üë§ {user['username']} RTErdogan profiline gidiyor...")
                    try:
                        driver.get("https://x.com/RTErdogan")
                        time.sleep(3)  # Sayfa y√ºklenme beklemesi
                        self.log_message(f"üì± {user['username']} RTErdogan profilinde 10 saniye geziniyor...")
                        self.simulate_scroll_duration(driver, 10)
                    except Exception as e:
                        self.log_message(f"‚ö†Ô∏è {user['username']} RTErdogan profiline gidilirken hata: {e}")

                    # √áerezleri MySQL'e kaydet (tarayƒ±cƒ± kapanmadan √∂nce)
                    self.save_cookies_to_mysql(driver, user)

                    # Profili kalƒ±cƒ± olarak kaydet
                    self.save_profile_permanently(user['username'], driver)

                    # IP sƒ±fƒ±rlama (eƒüer etkinse)
                    if self.proxy_enabled.isChecked() and self.reset_url_entry.text():
                        self.reset_ip()
                else:
                    self.log_message(f"‚ùå {user['username']} giri≈ü ba≈üarƒ±sƒ±z.")
                    driver.quit()

                # Kullanƒ±cƒ±lar arasƒ± bekleme
                if i < len(self.users):
                    wait_time = random.randint(3, 8)
                    self.log_message(f"‚è≥ Sonraki kullanƒ±cƒ± i√ßin {wait_time} saniye bekleniyor...")
                    time.sleep(wait_time)

            except Exception as e:
                self.log_message(f"‚ùå {user['username']} i≈ülenirken hata: {str(e)}")

        self.log_message("\nüéâ T√ºm kullanƒ±cƒ±lar i≈ülendi!")

    def create_driver(self, user):
        """Chrome driver olu≈ütur"""
        try:
            # Mobil Cihaz User-Agent atama (√∂nce selected_device'i belirle)
            existing_user_agent = user_manager.get_user_agent(user['username'])
            selected_device = None

            if existing_user_agent:
                # Mevcut user-agent'ƒ± kullan ve cihazƒ± bul
                for device in self.android_devices:
                    if device['user_agent'] == existing_user_agent:
                        selected_device = device
                        break

                if selected_device:
                    self.log_message(f"üì± {user['username']} i√ßin mevcut cihaz kullanƒ±lƒ±yor: {selected_device['name']}")
                else:
                    # Eski user-agent varsa yeni cihaz se√ß
                    selected_device = random.choice(self.android_devices)
                    self.log_message(f"üîÑ {user['username']} i√ßin eski user-agent tespit edildi, yeni cihaz atanƒ±yor: {selected_device['name']}")
            else:
                # Rastgele cihaz se√ß ve kaydet
                selected_device = random.choice(self.android_devices)
                self.log_message(f"üì± {user['username']} i√ßin yeni cihaz atandƒ±: {selected_device['name']}")

            # √ñnce kullanƒ±cƒ±yƒ± MySQL'e kaydet (eƒüer yoksa)
            user_data = user_manager.get_user(user['username'])
            if not user_data:
                # Kullanƒ±cƒ± yok, √∂nce temel bilgileri kaydet
                basic_save_success = user_manager.save_user(
                    user['username'],
                    user['password'],
                    None,  # cookie_dict
                    user.get('proxy_ip'),
                    user.get('proxy_port'),
                    selected_device['user_agent'],  # user_agent
                    user.get('phone'),
                    user.get('email')
                )
                if basic_save_success:
                    self.log_message(f"‚úÖ {user['username']} temel bilgileri MySQL'e kaydedildi")
                else:
                    self.log_message(f"‚ö†Ô∏è {user['username']} temel bilgileri kaydedilemedi")

            # User-agent'ƒ± g√ºncelle/kaydet
            try:
                user_agent_updated = user_manager.update_user_agent(user['username'], selected_device['user_agent'])
                device_specs_updated = user_manager.update_device_specs(user['username'], selected_device)

                if user_agent_updated and device_specs_updated:
                    self.log_message(f"‚úÖ {user['username']} - {selected_device['name']} user-agent ve cihaz √∂zellikleri kaydedildi")
                    self.log_message(f"üîß Ekran: {selected_device['device_metrics']['width']}x{selected_device['device_metrics']['height']}, DPR: {selected_device['device_metrics']['device_scale_factor']}")
                elif user_agent_updated:
                    self.log_message(f"‚úÖ {user['username']} user-agent kaydedildi")
                    self.log_message(f"‚ö†Ô∏è {user['username']} cihaz √∂zellikleri kaydedilemedi")
                else:
                    self.log_message(f"‚ö†Ô∏è {user['username']} user-agent kaydedilemedi")
            except Exception as ua_error:
                self.log_message(f"‚ùå {user['username']} user-agent kaydetme hatasƒ±: {str(ua_error)}")

            # Chrome options - Replit ortamƒ± i√ßin optimize edilmi≈ü
            chrome_options = Options()

            # Temel g√ºvenlik ayarlarƒ± (Replit uyumlu)
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-first-run")
            chrome_options.add_argument("--no-default-browser-check")
            chrome_options.add_argument("--disable-default-apps")
            chrome_options.add_argument("--disable-blink-features=AutomationControlled")

            # Profil yolu ayarƒ± - √ßerezli giri≈ü i√ßin kalƒ±cƒ± profil kullan
            if user.get('auth_token') and user.get('ct0'):
                # √áerezli giri≈ü - kalƒ±cƒ± profili direkt kullan
                profile_path = os.path.abspath(f"./Profiller/{user['username']}")
                os.makedirs(profile_path, exist_ok=True)
                self.log_message(f"üç™ {user['username']} i√ßin kalƒ±cƒ± profil kullanƒ±lƒ±yor: {profile_path}")
            else:
                # Normal giri≈ü - ge√ßici profil kullan
                profile_path = os.path.join(TEMP_PROFILES_DIR, user['username'])
                os.makedirs(profile_path, exist_ok=True)
                self.log_message(f"üîë {user['username']} i√ßin ge√ßici profil kullanƒ±lƒ±yor: {profile_path}")

            # Mobil cihaz sim√ºlasyonu - viewport d√ºzeltildi
            mobile_emulation = {
                "deviceMetrics": {
                    "width": selected_device['device_metrics']['width'],
                    "height": selected_device['device_metrics']['height'],
                    "pixelRatio": selected_device['device_metrics']['device_scale_factor'],
                    "mobile": True,
                    "fitWindow": False,
                    "textAutosizing": False
                },
                "userAgent": selected_device['user_agent']
            }
            chrome_options.add_experimental_option("mobileEmulation", mobile_emulation)

            # Chrome pencere boyutunu mobil em√ºlasyon boyutuyla aynƒ± yap
            window_width = selected_device['device_metrics']['width']
            window_height = selected_device['device_metrics']['height']
            chrome_options.add_argument(f"--window-size={window_width},{window_height}")

            self.log_message(f"üì± {user['username']} i√ßin mobil em√ºlasyon: {selected_device['device_metrics']['width']}x{selected_device['device_metrics']['height']}")
            self.log_message(f"üñ•Ô∏è Chrome pencere boyutu: {window_width}x{window_height} (mobil em√ºlasyonla e≈üit)")

            # Profil yolu
            chrome_options.add_argument(f"--user-data-dir={profile_path}")

            # Basit performans ayarlarƒ±
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-plugins")
            chrome_options.add_argument("--lang=tr-TR")

            # Headless modu test i√ßin kapalƒ± (GUI modda √ßalƒ±≈ütƒ±r)
            # if not self.browser_visible.isChecked():
            #     chrome_options.add_argument("--headless=new")

            # Proxy ayarƒ±
            proxy_to_use = None
            if user.get('proxy_ip') and user.get('proxy_port'):
                proxy_to_use = f"{user['proxy_ip']}:{user['proxy_port']}"
                self.log_message(f"üåê √ñzel proxy kullanƒ±lƒ±yor: {proxy_to_use}")
            elif self.proxy_enabled.isChecked() and self.proxy_entry.text():
                proxy_to_use = self.proxy_entry.text()
                self.log_message(f"üåê Genel proxy kullanƒ±lƒ±yor: {proxy_to_use}")

            if proxy_to_use:
                if proxy_to_use.count(':') >= 3:
                    self.log_message(f"‚ö†Ô∏è Kimlik doƒürulamalƒ± proxy tespit edildi, atlanƒ±yor.")
                    return None
                chrome_options.add_argument(f"--proxy-server={proxy_to_use}")

            # Display ve GPU ayarlarƒ±
            chrome_options.add_argument("--remote-debugging-port=9222")

            # Chrome ba≈ülatma ayarlarƒ±
            chrome_options.add_argument("--no-first-run")
            chrome_options.add_argument("--no-default-browser-check")
            chrome_options.add_argument("--disable-default-apps")

            # Sadece temel anti-bot ayarlarƒ±
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            chrome_options.add_experimental_option("prefs", {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0
            })

            # Basit Chrome driver ba≈ülatma
            try:
                driver = webdriver.Chrome(options=chrome_options)
                driver.set_page_load_timeout(60)
                driver.implicitly_wait(15)

                self.log_message(f"‚úÖ Chrome driver ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")

                # Driver ba≈üarƒ±yla olu≈üturuldu mesajƒ±

            except Exception as e:
                self.log_message(f"‚ùå Chrome driver ba≈ülatma hatasƒ±: {str(e)}")
                return None

            # Minimal anti-bot korumasƒ± (sayfa y√ºklenmesinden sonra)
            try:
                script = "Object.defineProperty(navigator, 'webdriver', {get: () => undefined});"
                driver.execute_script(script)
                self.log_message(f"üõ°Ô∏è Anti-bot korumasƒ± aktif")
            except Exception as script_error:
                self.log_message(f"‚ö†Ô∏è Anti-bot script hatasƒ±: {script_error}")

            return driver

        except Exception as e:
            self.log_message(f"‚ùå Tarayƒ±cƒ± ba≈ülatma hatasƒ±: {str(e)}")
            return None

    def login_with_cookies(self, driver, user):
        """√áerezlerle giri≈ü yap"""
        try:
            auth_token = user.get('auth_token')
            ct0 = user.get('ct0')

            if not auth_token or not ct0:
                return False

            self.log_message(f"üç™ {user['username']} i√ßin √ßerezli giri≈ü deneniyor...")

            # √ñnce X.com'a git
            driver.get("https://x.com")
            time.sleep(3)

            # √áerezleri ekle
            cookies_to_add = [
                {'name': 'auth_token', 'value': auth_token, 'domain': '.x.com'},
                {'name': 'ct0', 'value': ct0, 'domain': '.x.com'}
            ]

            # Ek √ßerezler varsa ekle
            if user.get('guest_id'):
                cookies_to_add.append({'name': 'guest_id', 'value': user['guest_id'], 'domain': '.x.com'})

            for cookie in cookies_to_add:
                try:
                    driver.add_cookie(cookie)
                except Exception as e:
                    self.log_message(f"‚ö†Ô∏è √áerez ekleme hatasƒ±: {e}")

            # Sayfayƒ± yenile
            driver.refresh()
            time.sleep(5)

            # Giri≈ü kontrol√º
            current_url = driver.current_url
            if "login" not in current_url.lower() and ("home" in current_url.lower() or "x.com" in current_url):
                self.log_message(f"‚úÖ {user['username']} √ßerezli giri≈ü ba≈üarƒ±lƒ±")
                return True
            else:
                self.log_message(f"‚ùå {user['username']} √ßerezli giri≈ü ba≈üarƒ±sƒ±z")
                return False

        except Exception as e:
            self.log_message(f"‚ùå {user['username']} √ßerezli giri≈ü hatasƒ±: {str(e)}")
            return False

    def human_type(self, element, text):
        """Geli≈ümi≈ü insan benzeri yazma sim√ºlasyonu"""
        element.clear()
        time.sleep(random.uniform(0.1, 0.3))  # Ba≈ülangƒ±√ß beklemesi
        
        for i, char in enumerate(text):
            element.send_keys(char)
            
            # Karakter tipine g√∂re farklƒ± bekleme s√ºreleri
            if char.isalpha():
                # Harfler i√ßin daha hƒ±zlƒ±
                delay = random.uniform(0.08, 0.15)
            elif char.isdigit():
                # Rakamlar i√ßin orta hƒ±z
                delay = random.uniform(0.1, 0.18)
            elif char in ['_', '-', '.', '@']:
                # √ñzel karakterler i√ßin biraz daha yava≈ü
                delay = random.uniform(0.12, 0.22)
            else:
                # Diƒüer karakterler
                delay = random.uniform(0.1, 0.2)
            
            # Bazen daha uzun duraklamalar (d√º≈ü√ºnme anlarƒ±)
            if random.random() < 0.15:  # %15 olasƒ±lƒ±k
                delay += random.uniform(0.2, 0.5)
            
            # Bazen √ßok hƒ±zlƒ± yazma (akƒ±cƒ±lƒ±k anlarƒ±)
            elif random.random() < 0.1:  # %10 olasƒ±lƒ±k
                delay *= 0.5
            
            time.sleep(delay)

    def perform_login(self, driver, user):
        """Giri≈üteki bu i≈ülem birden fazla basamaktan olu≈üuyor ve her basamakta ba≈üarƒ±sƒ±zlƒ±k durumu kontrol edilmelidir"""

        try:
            # √ñnce √ßerezli giri≈ü dene
            if user.get('auth_token') and user.get('ct0'):
                if self.login_with_cookies(driver, user):
                    return True
                else:
                    self.log_message(f"üîÑ {user['username']} √ßerezli giri≈ü ba≈üarƒ±sƒ±z, normal giri≈ü deneniyor...")

            # X.com'a git
            self.log_message(f"üåê {user['username']} i√ßin X.com'a gidiliyor...")
            driver.get("https://x.com/i/flow/login?lang=tr")

            # Sayfa y√ºklenme kontrol√º - daha uzun bekleme
            time.sleep(5)
            current_url = driver.current_url
            if "login" not in current_url.lower():
                self.log_message(f"‚úÖ {user['username']} zaten giri≈ü yapmƒ±≈ü")
                return True

            # Ana sayfa y√ºklendi
            self.log_message(f"‚úÖ Ana sayfa y√ºklendi")

            # Sayfa i√ßeriƒüi kontrol√º - daha akƒ±llƒ± kontrol
            try:
                # Login form elementlerinin y√ºklenmesini bekle
                WebDriverWait(driver, 10).until(
                    EC.any_of(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input[autocomplete='username']")),
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='text']")),
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input[type='text']"))
                    )
                )
                self.log_message(f"‚úÖ Login formu y√ºklendi")
            except:
                self.log_message(f"‚ö†Ô∏è Login formu y√ºklenmedi, 5 saniye daha bekleniyor...")
                time.sleep(5)

            # Kullanƒ±cƒ± adƒ± alanƒ±nƒ± bul ve doldur
            try:
                self.log_message(f"üë§ {user['username']} kullanƒ±cƒ± adƒ± giriliyor...")

                # √áe≈üitli selector'larƒ± dene
                username_selectors = [
                    "input[autocomplete='username']",
                    "input[name='text']",
                    "input[data-testid='ocfEnterTextTextInput']",
                    ".r-30o5oe input",
                    "input[type='text']"
                ]

                username_element = None
                for selector in username_selectors:
                    try:
                        username_element = WebDriverWait(driver, 5).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                        )
                        break
                    except:
                        continue

                if not username_element:
                    raise Exception("Kullanƒ±cƒ± adƒ± alanƒ± bulunamadƒ±")

                # ƒ∞nsan benzeri yazma
                self.human_type(username_element, user['username'])

                # ƒ∞leri butonunu bul ve tƒ±kla
                self.log_message(f"‚û°Ô∏è ƒ∞leri butonuna tƒ±klanƒ±yor...")
                time.sleep(random.uniform(0.8, 1.5))  # Optimize edilmi≈ü bekleme

                next_button_selectors = [
                    "button[role='button']:has-text('ƒ∞leri')",
                    "[data-testid='LoginForm_Login_Button']",
                    "button:contains('ƒ∞leri')",
                    ".r-19u6a5r button"
                ]

                next_button = None
                for selector in next_button_selectors:
                    try:
                        next_button = driver.find_element(By.CSS_SELECTOR, selector)
                        break
                    except:
                        continue

                if not next_button:
                    # JavaScript ile buton ara
                    buttons = driver.find_elements(By.TAG_NAME, "button") 
                    for button in buttons:
                        if "ƒ∞leri" in button.text or "Next" in button.text:
                            next_button = button
                            break

                if next_button:
                    next_button.click()
                else:
                    raise Exception("ƒ∞leri butonu bulunamadƒ±")

                # ≈ûifre alanƒ±nƒ±n y√ºklenmesini bekle
                time.sleep(random.uniform(1.2, 2.5))

                # ≈ûifre alanƒ±nƒ± bul ve doldur
                self.log_message(f"üîë {user['username']} ≈üifresi giriliyor...")

                password_selectors = [
                    "input[autocomplete='current-password']",
                    "input[name='password']",
                    "input[type='password']",
                    "[data-testid='LoginForm_Password']"
                ]

                password_element = None
                for selector in password_selectors:
                    try:
                        password_element = WebDriverWait(driver, 10).until(
                            EC.presence_of_element_located((By.CSS_SELECTOR, selector))
                        )
                        break
                    except:
                        continue

                if not password_element:
                    raise Exception("≈ûifre alanƒ± bulunamadƒ±")

                # ƒ∞nsan benzeri ≈üifre yazma
                self.human_type(password_element, user['password'])

                # Giri≈ü yap butonunu bul ve tƒ±kla
                self.log_message(f"üö™ Giri≈ü yap butonuna tƒ±klanƒ±yor...")
                time.sleep(random.uniform(0.6, 1.2))

                login_button_selectors = [
                    "button[data-testid='LoginForm_Login_Button']",
                    "button:contains('Giri≈ü yap')",
                    "button:contains('Log in')",
                    ".r-19u6a5r button[role='button']"
                ]

                login_button = None
                for selector in login_button_selectors:
                    try:
                        login_button = driver.find_element(By.CSS_SELECTOR, selector)
                        break
                    except:
                        continue

                if not login_button:
                    # JavaScript ile buton ara
                    buttons = driver.find_elements(By.TAG_NAME, "button")
                    for button in buttons:
                        if "Giri≈ü yap" in button.text or "Log in" in button.text:
                            login_button = button
                            break

                if login_button:
                    login_button.click()
                else:
                    raise Exception("Giri≈ü yap butonu bulunamadƒ±")

                # Giri≈ü sonucunu bekle ve kontrol et
                self.log_message(f"‚è≥ Giri≈ü sonucu bekleniyor...")
                time.sleep(5)  # Optimize edilmi≈ü bekleme

                current_url = driver.current_url
                if "home" in current_url.lower() or ("x.com" in current_url and "login" not in current_url.lower()):
                    self.log_message(f"‚úÖ {user['username']} ba≈üarƒ±yla giri≈ü yaptƒ±")
                    return True
                else:
                    self.log_message(f"‚ùå {user['username']} giri≈ü ba≈üarƒ±sƒ±z - URL: {current_url}")
                    return False

            except Exception as e:
                self.log_message(f"‚ùå {user['username']} giri≈ü hatasƒ±: {str(e)}")
                return False

        except Exception as e:
            self.log_message(f"‚ùå {user['username']} genel hata: {str(e)}")
            return False

    def wait_and_type(self, driver, xpath, text):
        """Element bekle ve yazƒ± yaz"""
        try:
            wait = WebDriverWait(driver, 15)
            element = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))
            element.clear()
            time.sleep(0.5)
            element.send_keys(text)
            time.sleep(1)
        except TimeoutException:
            self.log_message(f"‚ùå Element bulunamadƒ±: {xpath}")
            raise

    def wait_and_click(self, driver, xpath):
        """Element bekle ve tƒ±kla"""
        try:
            wait = WebDriverWait(driver, 15)
            element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            time.sleep(0.5)
            element.click()
            time.sleep(1)
        except TimeoutException:
            self.log_message(f"‚ùå Tƒ±klanabilir element bulunamadƒ±: {xpath}")
            raise

    def simulate_scroll(self, driver):
        """Organik scroll sim√ºlasyonu"""
        scroll_duration = random.randint(10, 20)
        self.log_message(f"üìú {scroll_duration} saniye scroll sim√ºlasyonu yapƒ±lƒ±yor...")

        start_time = time.time()
        while time.time() - start_time < scroll_duration:
            scroll_amount = random.randint(300, 600)
            driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
            time.sleep(random.randint(1000, 3000) / 1000)

    def simulate_scroll_duration(self, driver, duration):
        """Belirli s√ºre scroll sim√ºlasyonu"""
        start_time = time.time()
        while time.time() - start_time < duration:
            # Rastgele scroll y√∂n√º ve miktarƒ±
            scroll_amount = random.randint(200, 500)
            direction = random.choice([1, -1])  # Yukarƒ± veya a≈üaƒüƒ±
            
            driver.execute_script(f"window.scrollBy(0, {scroll_amount * direction});")
            time.sleep(random.uniform(0.8, 2.0))  # Rastgele bekleme

    def check_browser_ip(self, driver):
        """Tarayƒ±cƒ±nƒ±n IP adresini kontrol et"""
        try:
            self.log_message("üîç Tarayƒ±cƒ± IP adresi kontrol ediliyor...")

            # IP kontrol sitesine git
            driver.get("https://api.ipify.org")
            time.sleep(3)

            # IP adresini al
            browser_ip = driver.find_element("tag name", "body").text.strip()

            self.log_message(f"üåê Tarayƒ±cƒ± IP adresi: {browser_ip}")
            self.set_browser_ip(browser_ip)

            return browser_ip

        except Exception as e:
            self.log_message(f"‚ùå Tarayƒ±cƒ± IP kontrol hatasƒ±: {str(e)}")
            self.set_browser_ip("Kontrol edilemedi")
            return None

    def validate_proxy(self, browser_ip):
        """Proxy kontrol√º yap"""
        try:
            # Proxy etkin deƒüilse kontrol yapma
            if not self.proxy_enabled.isChecked():
                return True

            # Bilgisayar IP'si ile kar≈üƒ±la≈ütƒ±r
            computer_ip = self.current_ip

            if browser_ip == computer_ip:
                self.log_message("‚ö†Ô∏è UYARI: Proxy etkin ama IP deƒüi≈ümemi≈ü!")
                self.show_warning("IP adresi deƒüi≈ümemi≈ü!\n\nProxy ayarlarƒ±nƒ±zƒ± kontrol edin.\nƒ∞≈ülem durduruldu.")
                return False

            self.log_message("‚úÖ Proxy doƒürulama ba≈üarƒ±lƒ± - IP deƒüi≈ümi≈ü")
            return True

        except Exception as e:
            self.log_message(f"‚ùå Proxy doƒürulama hatasƒ±: {str(e)}")
            return True  # Hata durumunda devam et

    def save_cookies_to_mysql(self, driver, user):
        """X.com √ßerezlerini MySQL'e kaydet"""
        try:
            self.log_message(f"üç™ {user['username']} i√ßin √ßerezler kaydediliyor...")

            # x.com'a git (eƒüer ba≈üka sayfadaysa)
            current_url = driver.current_url
            if "x.com" not in current_url:
                driver.get("https://x.com/")
                time.sleep(3)

            # T√ºm √ßerezleri al
            cookies = driver.get_cookies()

            # ƒ∞stenen √ßerezleri filtrele
            target_cookies = [
                'auth_token', 'gt', 'guest_id', 'twid', 'lang', '__cf_bm',
                'att', 'ct0', 'd_prefs', 'dnt', 'guest_id_ads', 
                'guest_id_marketing', 'kdt', 'personalization_id'
            ]

            cookie_dict = {}
            for cookie in cookies:
                if cookie['name'] in target_cookies:
                    cookie_dict[cookie['name']] = cookie['value']

            # MySQL'e kaydet
            if cookie_dict:
                self.log_message(f"üîç {user['username']} i√ßin {len(cookie_dict)} √ßerez bulundu: {list(cookie_dict.keys())}")

                # √áerezleri ayrƒ± bir fonksiyon ile kaydet
                cookie_success = user_manager.update_user_cookies(user['username'], cookie_dict)
                if cookie_success:
                    self.log_message(f"‚úÖ {user['username']} √ßerezleri MySQL'e kaydedildi ({len(cookie_dict)} √ßerez)")
                else:
                    self.log_message(f"‚ö†Ô∏è {user['username']} √ßerezleri MySQL'e kaydedilemedi")

                    # Alternatif olarak save_user fonksiyonunu dene
                    try:
                        alternative_success = user_manager.save_user(
                            user['username'],
                            user['password'],
                            cookie_dict,
                            user.get('year'),
                            user.get('month'),
                            user.get('proxy'),
                            user.get('proxy_port'),
                            user_manager.get_user_agent(user['username'])
                        )
                        if alternative_success:
                            self.log_message(f"‚úÖ {user['username']} √ßerezleri alternatif y√∂ntemle kaydedildi")
                        else:
                            self.log_message(f"‚ùå {user['username']} √ßerezleri alternatif y√∂ntemle de kaydedilemedi")
                    except Exception as e:
                        self.log_message(f"‚ùå {user['username']} alternatif kaydetme hatasƒ±: {str(e)}")
            else:
                self.log_message(f"‚ö†Ô∏è {user['username']} i√ßin √ßerez bulunamadƒ±")

        except Exception as e:
            self.log_message(f"‚ùå {user['username']} √ßerez kaydetme hatasƒ±: {str(e)}")

    def reset_ip(self):
        """IP sƒ±fƒ±rlama - HTTP isteƒüi ile"""
        try:
            reset_url = self.reset_url_entry.text()
            if not reset_url:
                return

            self.log_message(f"üîÑ IP sƒ±fƒ±rlanƒ±yor: {reset_url}")

            # HTTP isteƒüi g√∂nder
            response = requests.get(reset_url, timeout=10)

            if response.status_code == 200:
                self.log_message(f"‚úÖ IP ba≈üarƒ±yla sƒ±fƒ±rlandƒ±")
            else:
                self.log_message(f"‚ö†Ô∏è IP sƒ±fƒ±rlama yanƒ±tƒ±: {response.status_code}")

            # IP'nin deƒüi≈ümesi i√ßin kƒ±sa bir bekleme
            time.sleep(3)

        except Exception as e:
            self.log_message(f"‚ùå IP sƒ±fƒ±rlama hatasƒ±: {str(e)}")

    def save_profile_permanently(self, username, driver):
        """Profili kalƒ±cƒ± klas√∂re kaydet"""
        try:
            # Tarayƒ±cƒ± kapanmadan √∂nce profil yolunu al
            temp_profile = driver.capabilities['chrome']['userDataDir']
            permanent_profile = f"./Profiller/{username}"

            # √áerezli giri≈ü kullanƒ±ldƒ±ysa, ge√ßici profil ile kalƒ±cƒ± profil aynƒ±dƒ±r
            is_cookie_login = temp_profile == os.path.abspath(permanent_profile)
            
            if is_cookie_login:
                self.log_message(f"üç™ {username} √ßerezli giri≈ü tespit edildi - kalƒ±cƒ± profil zaten kullanƒ±lƒ±yor")
                
                # √áerezleri kaydetmek i√ßin son bir kez daha al
                self.log_message(f"üîÑ {username} i√ßin final √ßerez kontrol√º yapƒ±lƒ±yor...")
                
                # X.com'a git ve √ßerezleri al
                current_url = driver.current_url
                if "x.com" not in current_url:
                    driver.get("https://x.com/")
                    time.sleep(3)

                # Son √ßerez durumunu kontrol et ve kaydet
                cookies = driver.get_cookies()
                target_cookies = [
                    'auth_token', 'gt', 'guest_id', 'twid', 'lang', '__cf_bm',
                    'att', 'ct0', 'd_prefs', 'dnt', 'guest_id_ads', 
                    'guest_id_marketing', 'kdt', 'personalization_id'
                ]

                final_cookie_dict = {}
                for cookie in cookies:
                    if cookie['name'] in target_cookies:
                        final_cookie_dict[cookie['name']] = cookie['value']

                if final_cookie_dict:
                    # Final √ßerezleri MySQL'e kaydet
                    try:
                        cookie_success = user_manager.update_user_cookies(username, final_cookie_dict)
                        if cookie_success:
                            self.log_message(f"‚úÖ {username} final √ßerezleri kaydedildi ({len(final_cookie_dict)} √ßerez)")
                        else:
                            # Alternatif kaydetme y√∂ntemi dene
                            user_data = user_manager.get_user(username)
                            if user_data:
                                alt_success = user_manager.save_user(
                                    username,
                                    user_data['sifre'],
                                    final_cookie_dict,
                                    user_data.get('proxy_ip'),
                                    user_data.get('proxy_port'),
                                    user_data.get('user_agent'),
                                    user_data.get('telefon'),
                                    user_data.get('email')
                                )
                                if alt_success:
                                    self.log_message(f"‚úÖ {username} final √ßerezleri alternatif y√∂ntemle kaydedildi")
                                else:
                                    self.log_message(f"‚ö†Ô∏è {username} final √ßerezleri kaydedilemedi")
                    except Exception as cookie_error:
                        self.log_message(f"‚ùå {username} final √ßerez kaydetme hatasƒ±: {str(cookie_error)}")
                
                # Chrome'un dosyalarƒ± temiz kapatmasƒ± i√ßin ek i≈ülemler
                try:
                    # Sync i≈ülemini zorla
                    driver.execute_script("window.chrome && window.chrome.runtime && window.chrome.runtime.reload();")
                except:
                    pass

                # Tarayƒ±cƒ±yƒ± nazik√ße kapat
                try:
                    # T√ºm sekmeleri kapat
                    for handle in driver.window_handles:
                        driver.switch_to.window(handle)
                        driver.close()
                except:
                    pass
                
                driver.quit()
                time.sleep(3)  # √áerezli giri≈ü i√ßin daha kƒ±sa bekleme
                
                self.log_message(f"üíæ {username} kalƒ±cƒ± profili g√ºncellendi (√ßerezli giri≈ü)")
                
            else:
                # Normal giri≈ü - ge√ßici profilden kalƒ±cƒ± profile kopyalama
                self.log_message(f"üîë {username} normal giri≈ü tespit edildi - profil kopyalanacak")
                
                # √áerezleri kaydetmek i√ßin son bir kez daha al
                self.log_message(f"üîÑ {username} i√ßin final √ßerez kontrol√º yapƒ±lƒ±yor...")
                
                # X.com'a git ve √ßerezleri al
                current_url = driver.current_url
                if "x.com" not in current_url:
                    driver.get("https://x.com/")
                    time.sleep(3)

                # Son √ßerez durumunu kontrol et ve kaydet
                cookies = driver.get_cookies()
                target_cookies = [
                    'auth_token', 'gt', 'guest_id', 'twid', 'lang', '__cf_bm',
                    'att', 'ct0', 'd_prefs', 'dnt', 'guest_id_ads', 
                    'guest_id_marketing', 'kdt', 'personalization_id'
                ]

                final_cookie_dict = {}
                for cookie in cookies:
                    if cookie['name'] in target_cookies:
                        final_cookie_dict[cookie['name']] = cookie['value']

                if final_cookie_dict:
                    # Final √ßerezleri MySQL'e kaydet
                    try:
                        cookie_success = user_manager.update_user_cookies(username, final_cookie_dict)
                        if cookie_success:
                            self.log_message(f"‚úÖ {username} final √ßerezleri kaydedildi ({len(final_cookie_dict)} √ßerez)")
                        else:
                            # Alternatif kaydetme y√∂ntemi dene
                            user_data = user_manager.get_user(username)
                            if user_data:
                                alt_success = user_manager.save_user(
                                    username,
                                    user_data['sifre'],
                                    final_cookie_dict,
                                    user_data.get('proxy_ip'),
                                    user_data.get('proxy_port'),
                                    user_data.get('user_agent'),
                                    user_data.get('telefon'),
                                    user_data.get('email')
                                )
                                if alt_success:
                                    self.log_message(f"‚úÖ {username} final √ßerezleri alternatif y√∂ntemle kaydedildi")
                                else:
                                    self.log_message(f"‚ö†Ô∏è {username} final √ßerezleri kaydedilemedi")
                    except Exception as cookie_error:
                        self.log_message(f"‚ùå {username} final √ßerez kaydetme hatasƒ±: {str(cookie_error)}")
                
                # Chrome'un dosyalarƒ± temiz kapatmasƒ± i√ßin ek i≈ülemler
                try:
                    # Sync i≈ülemini zorla
                    driver.execute_script("window.chrome && window.chrome.runtime && window.chrome.runtime.reload();")
                except:
                    pass

                # Tarayƒ±cƒ±yƒ± nazik√ße kapat
                try:
                    # T√ºm sekmeleri kapat
                    for handle in driver.window_handles:
                        driver.switch_to.window(handle)
                        driver.close()
                except:
                    pass
                
                driver.quit()
                time.sleep(8)  # Chrome'un dosyalarƒ± kapatmasƒ± i√ßin daha uzun bekleme

                # Profil kopyalama i≈ülemi
                if os.path.exists(temp_profile):
                    try:
                        # Eƒüer kalƒ±cƒ± profil zaten varsa, √∂nce sil
                        if os.path.exists(permanent_profile):
                            shutil.rmtree(permanent_profile)
                            self.log_message(f"üóëÔ∏è {username} eski profili silindi")

                        # Yeni profili kopyala - geli≈ümi≈ü kopyalama
                        def copy_chrome_profile(src, dst):
                            """Chrome profili i√ßin √∂zel kopyalama fonksiyonu"""
                            try:
                                # Ana klas√∂r√º kopyala
                                shutil.copytree(src, dst, ignore_dangling_symlinks=True)
                                
                                # Kritik dosyalarƒ± tekrar kontrol et ve kopyala
                                critical_files = [
                                    'Default/Cookies',
                                    'Default/Local Storage',
                                    'Default/Preferences', 
                                    'Default/History',
                                    'Default/Web Data',
                                    'Default/Current Session',
                                    'Default/Current Tabs',
                                    'Default/Last Session',
                                    'Default/Last Tabs',
                                    'Default/Login Data',
                                    'Default/Sessions'
                                ]
                                
                                copied_files = []
                                for file_path in critical_files:
                                    src_file = os.path.join(src, file_path)
                                    dst_file = os.path.join(dst, file_path)
                                    
                                    if os.path.exists(src_file):
                                        try:
                                            os.makedirs(os.path.dirname(dst_file), exist_ok=True)
                                            shutil.copy2(src_file, dst_file)
                                            copied_files.append(file_path)
                                        except Exception as copy_err:
                                            self.log_message(f"‚ö†Ô∏è {file_path} kopyalanamadƒ±: {copy_err}")
                                            
                                # Dizin i√ßindeki t√ºm LocalStorage klas√∂rlerini kopyala
                                local_storage_dir = os.path.join(src, 'Default', 'Local Storage')
                                if os.path.exists(local_storage_dir):
                                    dst_local_storage = os.path.join(dst, 'Default', 'Local Storage')
                                    try:
                                        if os.path.exists(dst_local_storage):
                                            shutil.rmtree(dst_local_storage)
                                        shutil.copytree(local_storage_dir, dst_local_storage)
                                        copied_files.append('Default/Local Storage/*')
                                    except Exception as ls_err:
                                        self.log_message(f"‚ö†Ô∏è Local Storage kopyalanamadƒ±: {ls_err}")
                                        
                                self.log_message(f"üìÅ Kopyalanan dosyalar: {copied_files}")
                                return True
                                
                            except Exception as e:
                                self.log_message(f"‚ùå Profil kopyalama hatasƒ±: {str(e)}")
                                return False
                        
                        # Kopyalama i≈ülemini ger√ßekle≈ütir
                        if copy_chrome_profile(temp_profile, permanent_profile):
                            self.log_message(f"üíæ {username} profili kalƒ±cƒ± olarak kaydedildi")
                            
                            # Dosya izinlerini ayarla
                            try:
                                for root, dirs, files in os.walk(permanent_profile):
                                    for d in dirs:
                                        os.chmod(os.path.join(root, d), 0o755)
                                    for f in files:
                                        os.chmod(os.path.join(root, f), 0o644)
                            except Exception as perm_error:
                                self.log_message(f"‚ö†Ô∏è ƒ∞zin ayarlama hatasƒ±: {perm_error}")

                        # Ge√ßici profili temizle
                        try:
                            shutil.rmtree(temp_profile)
                            self.log_message(f"üßπ {username} ge√ßici profili temizlendi")
                        except Exception as cleanup_error:
                            self.log_message(f"‚ö†Ô∏è Ge√ßici profil temizleme hatasƒ±: {cleanup_error}")

                        # Profil i√ßindeki √∂nemli dosyalarƒ± kontrol et
                        important_files = ['Default/Cookies', 'Default/Local Storage', 'Default/Preferences']
                        missing_files = []
                        existing_files = []
                        
                        for file_path in important_files:
                            full_path = os.path.join(permanent_profile, file_path)
                            if not os.path.exists(full_path):
                                missing_files.append(file_path)
                            else:
                                existing_files.append(file_path)
                        
                        if missing_files:
                            self.log_message(f"‚ö†Ô∏è {username} profilinde eksik dosyalar: {missing_files}")
                        if existing_files:
                            self.log_message(f"‚úÖ {username} mevcut dosyalar: {existing_files}")

                    except Exception as copy_error:
                        self.log_message(f"‚ùå Profil kopyalama hatasƒ±: {str(copy_error)}")
                else:
                    self.log_message(f"‚ö†Ô∏è {username} ge√ßici profil bulunamadƒ±: {temp_profile}")

        except Exception as e:
            self.log_message(f"‚ùå Profil kaydetme hatasƒ±: {str(e)}")

        # Son giri≈ü zamanƒ±nƒ± g√ºncelle
        try:
            user = next((u for u in self.users if u['username'] == username), None)
            if user:
                # Sadece son giri≈ü zamanƒ±nƒ± g√ºncelle (kullanƒ±cƒ± zaten kaydedildi)
                user_manager.update_user(username, user['password'], None)
                self.log_message(f"‚úÖ {username} son giri≈ü zamanƒ± g√ºncellendi")
            else:
                self.log_message(f"‚ö†Ô∏è {username} kullanƒ±cƒ± bilgisi bulunamadƒ±")
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è Son giri≈ü g√ºncelleme hatasƒ±: {str(e)}")

    def start_ip_monitoring(self):
        """IP takibini ba≈ülat"""
        self.ip_timer.start(10000)  # 10 saniyede bir
        self.update_ip()  # ƒ∞lk g√ºncelleme

    def update_ip(self):
        """IP'yi g√ºncelle (QTimer ile thread-safe)"""
        def get_ip():
            try:
                response = requests.get("https://api.ipify.org", timeout=5)
                return response.text.strip()
            except:
                return "Baƒülantƒ± hatasƒ±"

        # Thread'de IP al
        thread = threading.Thread(target=lambda: self.set_ip(get_ip()), daemon=True)
        thread.start()

    def set_ip(self, ip):
        """Bilgisayar IP'sini set et"""
        self.current_ip = ip
        self.computer_ip_display.setText(self.current_ip)

    def set_browser_ip(self, ip):
        """Tarayƒ±cƒ± IP'sini set et"""
        self.browser_ip_display.setText(ip)

    def log_message(self, message):
        """Log mesajƒ± ekle"""
        timestamp = time.strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"

        # Thread-safe log ekleme - log_text varsa
        if hasattr(self, 'log_text') and self.log_text is not None:
            self.log_text.append(log_entry)
            self.log_text.ensureCursorVisible()
        else:
            # log_text hen√ºz hazƒ±r deƒüilse konsola yazdƒ±r
            print(log_entry)

    def return_to_main(self):
        """Ana men√ºye d√∂n"""
        self.ip_thread_running = False
        self.ip_timer.stop()
        self.return_callback()

    def show_error(self, message):
        """Hata mesajƒ± g√∂ster"""
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Hata")
        msg.setText(message)
        msg.exec_()

    def show_warning(self, message):
        """Uyarƒ± mesajƒ± g√∂ster"""
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("Uyarƒ±")
        msg.setText(message)
        msg.exec_()